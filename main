[org 0x100]

jmp start

x_snake: dw 20
y_snake: dw 0
xy_snake: dw 0
len: dw 1
ltmv: dw 1
is_end: dw 0
move: dw " Last Move: X"
status: dw "ESC-->End"
end_message: dw "Game has been ended"
score: dw "Score: "

xy_fruit: dw 0
x_fruit: dw 0
y_fruit: dw 0



start:
	call bg
	call game
	jmp end
	
game:
	push ax
	push bx
	push cx
	push dx
	push si
	push di
	push es

	mov word[x_snake], 20
	mov word[y_snake], 2
	call snake
	call fruit
	main:
		cmp word[y_snake], 0
		je end
		cmp word[y_snake], 22 
		jae end
		cmp word[x_snake], 0
		je end
		cmp word[x_snake], 79
		jae end
		call check_key
		
		cmp word[ltmv], 1
		jbe label1
		
		push 6
		jmp label2
		
		label1:
			push 3
		label2:
			call delay
			call bg
			call snake

	jmp main

	pop es
	pop di
	pop si
	pop dx
	pop cx
	pop bx
	pop ax
	ret


check_key:
	mov ah, 0x1
	int 16h
	jz cont
	mov ah, 0x0
	int 16h
	
	cmp ah, 4Bh
	je left
	cmp ah, 4Dh
	je right
	cmp ah, 48h
	je up
	cmp ah, 50h
	je down
	cmp ah, 01h
	je end
	jmp cont

left:
	cmp word[ltmv], 1
	je cont
	add word[x_snake], -1
	mov word[ltmv], 0
	mov word[move+12], 'L'
	ret
 
right:
	cmp word[ltmv], 0
	je cont
	add word[x_snake], 1
	mov word[ltmv], 1
	mov word[move+12], 'R'
	ret

up:
	cmp word[ltmv], 3
	je cont
	add word[y_snake], -1
	mov word[ltmv], 2
	mov word[move+12], 'U'
	ret

down:
	cmp word[ltmv], 2
	je cont
	add word[y_snake], 1
	mov word[ltmv], 3
	mov word[move+12], 'D'
	ret

cont:
	cmp word[ltmv], 0
	je left
	cmp word[ltmv], 1
	je right
	cmp word[ltmv], 2
	je up
	cmp word[ltmv], 3
	je down
	ret

fruit:
	push ax
	push bx
	push cx
	push dx
	push si
	push di
	push es
	
	mov dx, 0xB800
	mov es, dx
	call Genxy_fruit
	mov di, word[xy_fruit]
	mov ax, 0x07DC
	stosw
	
	
	pop es
	pop di
	pop si
	pop dx
	pop cx
	pop bx
	pop ax
	ret


snake:	
	push ax
	push dx
	push cx
	push di
	push es
	std
	
	mov dx, 0xB800
	mov es, dx
	mov dh, 0x02
	mov dl, 0xDC
	
	
	mov ax, [x_snake]
	push ax
	mov ax, [y_snake]
	push ax
	mov ax, xy_snake
	push ax
	call get_cords

	
	mov ax, [xy_snake]
	cmp ax, [xy_fruit]
	jne l4 
	add word[len], 0
	call Genxy_fruit
	
	l4:	
	mov di, word[xy_snake]
	mov cx, word[len]
	xchg ax, dx
	mov ax, 0x07DC
	mov [es:di], ax
	add di, 2
	mov ax, 0x02DC
	dec cx
	rep stosw
	mov ax, 0x07DC
	mov di, word[xy_fruit]
	stosw
	
	xchg ax, dx
	
	
	pop es
	pop di
	pop cx
	pop dx
	pop ax
	ret
	
get_cords:
	push bp
	mov bp, sp
	push ax
	push bx

	mov al, [bp+6]
	mov bl, 80
	mul bl
	add ax, [bp+8]
	shl ax, 1
	mov bx, [bp+4]
	mov [bx], ax
	
	pop bx
	pop ax
	pop bp
	ret 6


	
delay:
	push bp
	mov bp, sp
	push cx
	push dx
	push di
	
	mov cx, [bp+4]
	mov di, 0

	l1: 
		mov dx, 0xFFFF
		l2: 
			dec dx
			jnz l2
	loop l1
	
	pop di
	pop dx
	pop cx
	pop bp
	ret 2


bg:
	push ax
	push cx
	push di
	push es
	
	
	mov ax, 0xB800
	mov es, ax
	mov ah, 0x07
	mov al, 0x20
	mov di, 0
	mov cx, 2000
	cld
	rep stosw
	mov ah, 0x07
	mov al, 0xB1
	
	mov cx, 24
	mov di, 0
		l3:
			stosw
			add di, 156
			stosw
		loop l3
	
	mov di, 0
	mov cx, 80
	cld
	rep stosw
	mov di, 3520
	mov cx, 80
	cld 
	rep stosw
	
	mov ah, 0x13
	mov al, 1 
	mov bh, 0 
	mov bl, 7
	mov dx, 0x1701 
	mov cx, 13
	push cs 
	pop es 
	mov bp, move
	int 0x10 
	
	mov dx, 0x1715
	mov cx, 9
	push cs 
	pop es 
	mov bp, status
	int 0x10 

	mov dx, 0x1725
	mov cx, 7
	push cs 
	pop es 
	mov bp, score
	int 0x10 
	
	
	pop es
	pop di
	pop dx
	pop cx
	ret

Genxy_fruit:

	push cx
	push ax
	push dx
	
	call GenRandRow
	call GenRandCol
	mov ax, word[x_fruit]
	push ax
	mov ax, word[y_fruit]
	push ax
	mov ax, xy_fruit
	push ax

	call get_cords

	; mov ah, 0x00
	; int 0x1A 
	; mov ax, dx
	; xor dx, dx
	; mov cx, 3360
	; div cx
	
	; shr dx, 1
	; shl dx, 1
	
	; add dx, 160
	
	; mov word[xy_fruit],dx
	
	pop dx
	pop ax
	pop cx
	ret

GenRandRow:
	push cx
	push ax
	push dx
	
	mov ah, 0x00
	int 0x1A 
	mov ax, dx
	xor dx, dx
	mov cx, 20
	div cx
	
	shr dx, 1
	shl dx, 1
	
	add dx, 2
	
	mov word[y_fruit],dx
	
	pop dx
	pop ax
	pop cx
	ret

GenRandCol:
	push cx
	push ax
	push dx
	
	mov ah, 0x00
	int 0x1A 
	mov ax, dx
	xor dx, dx
	mov cx, 70
	div cx
	
	shr dx, 1
	shl dx, 1
	
	add dx, 3
	
	mov word[x_fruit],dx
	
	pop dx
	pop ax
	pop cx
	ret
	
end:
	mov ah, 0x13
	mov al, 1 
	mov bh, 0 
	mov bl, 0xEE
	mov dh, 0x0A
	mov dl, 30
	mov cx, 19
	push cs 
	pop es 
	mov bp, end_message
	int 0x10 
	
	mov dx, 0x1700
	mov cx, 0
	int 0x10 
	
	
	mov ax, 0x4C00
	int 0x21
